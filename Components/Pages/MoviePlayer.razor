@page "/";
@implements IAsyncDisposable
@inject IJSRuntime JS

<div class="container-fluid p-3">
    <div class="row align-items-center justify-content-center"> 
        <div class="col-12 p-0 mb-5 ">            
            <div class="p-2 d-flex align-items-center justify-content-center">    
                <div class="outer-container">
                    <div class="inner-container">
                        <div class="video-overlay rounded">Now Playing: @nowPlayingMovie?.Title</div>
                        <video @ref=videoPlayer controls id="videoPlayer" poster="/images/videoPoster.png">
                        </video>
                    </div>
                </div>
            </div>            
        </div>        
        <div class="col-12 d-flex align-items-center justify-content-center">
            <div id="scrollbar" class="hstack gap-4 cardList">
                @foreach (var item in movies)
                {
                    <MovieCard Movie="item" OnPlayCallBack="@playMovie" NowPlayingMovie="@nowPlayingMovie?.Title"   />
                }
            </div>
        </div>
    </div>
</div>


@code {


    private List<Movie> movies = new();
    private Movie? nowPlayingMovie;
    private ElementReference videoPlayer;
    private IJSObjectReference? module; 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //import the js module
            module = await JS.InvokeAsync<IJSObjectReference>(
              "import", "./Components/Pages/MoviePlayer.razor.js");

            //call the function to load the movie
            await module.InvokeVoidAsync("loadMovie", nowPlayingMovie.Video, videoPlayer);

        }
    }
    protected override void OnInitialized()
    {
        getMovies();

        //set the active movie
        if (nowPlayingMovie is null)
        {
            nowPlayingMovie = movies[0];
        }
        
    }

    private async void playMovie(Movie movie)
    {
        if (module is not null && movie is not null)
        {
            nowPlayingMovie = movie;     

            //call the js function to play the movie
            await module.InvokeVoidAsync("playMovie", nowPlayingMovie.Video, videoPlayer);
        }
        
    }

    //Dispose of the js module
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    //Add movies to the list
    private void getMovies()
    {
        movies.Add(new Movie()
            {
                Title = "Skate Bros",
                Poster = "SkateBros.png",
                Video = "SkateBros.mp4"
            });

        movies.Add(new Movie()
            {
                Title = "Before the Storm",
                Poster = "CalmingWaves.png",
                Video = "CalmingWaves.mp4"
            });

        movies.Add(new Movie()
            {
                Title = "Mustang Sally",
                Poster = "MustangSally.png",
                Video = "MustangSally.mp4"
            });

        movies.Add(new Movie()
            {
                Title = "The Sixth Element",
                Poster = "TheSixthElement.png",
                Video = "TheSixthElement.mp4"
            });

        movies.Add(new Movie()
            {
                Title = "Cyber City 2045",
                Poster = "Cyber2045.png",
                Video = "Cyber2045.mp4"
            });

        movies.Add(new Movie()
            {
                Title = "Zero Hour",
                Poster = "DestinyZeroHour.png",
                Video = "DestinyZeroHour.mp4"
            });
    }
}
